/**
 * BuildingBugAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CreateTipoRequestContract
import io.swagger.client.models.UpdateTipoRequestContract

import io.swagger.client.infrastructure.*

class TipoApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Obter todos os Tipos
     * 
     * @param version  
     * @return void
     */
    fun apiVversionTipoAllGet(version: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v{version}/Tipo/all".replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Obter todos os tipos de uma determinada categoria
     * 
     * @param categoria  
     * @param version  
     * @return void
     */
    fun apiVversionTipoCategoriaCategoriaGet(categoria: kotlin.String, version: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v{version}/Tipo/categoria/{categoria}".replace("{" + "categoria" + "}", "$categoria").replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Eliminar Tipo
     * 
     * @param id  
     * @param version  
     * @return void
     */
    fun apiVversionTipoDeleteIdDelete(id: kotlin.Int, version: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v{version}/Tipo/delete/{id}".replace("{" + "id" + "}", "$id").replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Obter Tipo
     * 
     * @param id  
     * @param version  
     * @return void
     */
    fun apiVversionTipoIdGet(id: kotlin.Int, version: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v{version}/Tipo/{id}".replace("{" + "id" + "}", "$id").replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Criar Tipo
     * 
     * @param version  
     * @param body  (optional)
     * @return void
     */
    fun apiVversionTipoNewPost(version: kotlin.String, body: CreateTipoRequestContract? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v{version}/Tipo/new".replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Atualizar Tipo
     * 
     * @param version  
     * @param body  (optional)
     * @return void
     */
    fun apiVversionTipoUpdatePut(version: kotlin.String, body: UpdateTipoRequestContract? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v{version}/Tipo/update".replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
