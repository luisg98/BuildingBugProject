/**
 * BuildingBug.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CreateProfissionalCodigoPostalRequestContract

import io.swagger.client.infrastructure.*

class ProfissionalCodigoPostalApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param version  
     * @return void
     */
    fun apiVversionProfissionalCodigoPostalAllGet(version: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v{version}/ProfissionalCodigoPostal/all".replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param profissionalId  
     * @param codigoPostalCPId  
     * @param version  
     * @return void
     */
    fun apiVversionProfissionalCodigoPostalDeleteProfissionalIdCodigoPostalCPIdDelete(profissionalId: kotlin.Int, codigoPostalCPId: kotlin.Int, version: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v{version}/ProfissionalCodigoPostal/delete/{profissionalId}/{codigoPostalCPId}".replace("{" + "profissionalId" + "}", "$profissionalId").replace("{" + "codigoPostalCPId" + "}", "$codigoPostalCPId").replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param version  
     * @param body  (optional)
     * @return void
     */
    fun apiVversionProfissionalCodigoPostalNewPost(version: kotlin.String, body: CreateProfissionalCodigoPostalRequestContract? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v{version}/ProfissionalCodigoPostal/new".replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param profissionalId  
     * @param codigoPostalCPId  
     * @param version  
     * @return void
     */
    fun apiVversionProfissionalCodigoPostalProfissionalIdCodigoPostalCPIdGet(profissionalId: kotlin.Int, codigoPostalCPId: kotlin.Int, version: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v{version}/ProfissionalCodigoPostal/{profissionalId}/{codigoPostalCPId}".replace("{" + "profissionalId" + "}", "$profissionalId").replace("{" + "codigoPostalCPId" + "}", "$codigoPostalCPId").replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
