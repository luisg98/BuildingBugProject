/**
 * BuildingBugAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CreateTipoProfissionalRequestContract

import io.swagger.client.infrastructure.*

class TipoProfissionalApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Obter todos os tipos de profissional
     * 
     * @param version  
     * @return void
     */
    fun apiVversionTipoProfissionalAllGet(version: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v{version}/TipoProfissional/all".replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Eliminar tipo de profissional
     * 
     * @param version  
     * @param tipoId  (optional)
     * @param profissionalId  (optional)
     * @return void
     */
    fun apiVversionTipoProfissionalDeleteDelete(version: kotlin.String, tipoId: kotlin.Int? = null, profissionalId: kotlin.Int? = null): Unit {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (tipoId != null) {
                put("tipoId", listOf(tipoId.toString()))
            }
            if (profissionalId != null) {
                put("profissionalId", listOf(profissionalId.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v{version}/TipoProfissional/delete".replace("{" + "version" + "}", "$version"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Criar tipo de profissional
     * 
     * @param version  
     * @param body  (optional)
     * @return void
     */
    fun apiVversionTipoProfissionalNewPost(version: kotlin.String, body: CreateTipoProfissionalRequestContract? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v{version}/TipoProfissional/new".replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Obter tipo de profissional
     * 
     * @param tipoId  
     * @param profissionalId  
     * @param version  
     * @return void
     */
    fun apiVversionTipoProfissionalTipoIdProfissionalIdGet(tipoId: kotlin.Int, profissionalId: kotlin.Int, version: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v{version}/TipoProfissional/{tipoId}/{profissionalId}".replace("{" + "tipoId" + "}", "$tipoId").replace("{" + "profissionalId" + "}", "$profissionalId").replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
