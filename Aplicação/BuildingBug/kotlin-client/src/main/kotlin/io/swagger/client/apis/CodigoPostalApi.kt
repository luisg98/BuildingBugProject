/**
 * BuildingBugAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CreateCodigoPostalRequestContract
import io.swagger.client.models.UpdateCodigoPostalRequestContract

import io.swagger.client.infrastructure.*

class CodigoPostalApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param version  
     * @return void
     */
    fun apiVversionCodigoPostalAllGet(version: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v{version}/CodigoPostal/all".replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param cp  
     * @param version  
     * @return void
     */
    fun apiVversionCodigoPostalCpGet(cp: kotlin.Int, version: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v{version}/CodigoPostal/{cp}".replace("{" + "cp" + "}", "$cp").replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Eliminar um código postal
     * 
     * @param cp  
     * @param version  
     * @return void
     */
    fun apiVversionCodigoPostalDeleteCpDelete(cp: kotlin.Int, version: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v{version}/CodigoPostal/delete/{cp}".replace("{" + "cp" + "}", "$cp").replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Criar um código postal
     * 
     * @param version  
     * @param body  (optional)
     * @return void
     */
    fun apiVversionCodigoPostalNewPost(version: kotlin.String, body: CreateCodigoPostalRequestContract? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v{version}/CodigoPostal/new".replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Atualizar um código postal
     * 
     * @param version  
     * @param body  (optional)
     * @return void
     */
    fun apiVversionCodigoPostalUpdatePut(version: kotlin.String, body: UpdateCodigoPostalRequestContract? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v{version}/CodigoPostal/update".replace("{" + "version" + "}", "$version")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
